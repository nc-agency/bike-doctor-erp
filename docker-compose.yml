# docker-compose.yml für bike-doctor-erp
# Erstellt am: 2025-05-05
# Letzte Änderung: Vollständige Aktualisierung gemäß offizieller frappe_docker-Vorlage
# Diese Datei ist eine Kopie der offiziellen frappe_docker compose.yaml mit minimalen Anpassungen

x-customizable-image: &customizable_image
  # By default the image used only contains the `frappe` and `erpnext` apps.
  # See https://github.com/frappe/frappe_docker/blob/main/docs/custom-apps.md
  # about using custom images.
  image: ${CUSTOM_IMAGE:-frappe/erpnext}:${CUSTOM_TAG:-$ERPNEXT_VERSION}
  pull_policy: ${PULL_POLICY:-always}
  restart: ${RESTART_POLICY:-unless-stopped}

x-depends-on-configurator: &depends_on_configurator
  depends_on:
    configurator:
      condition: service_completed_successfully

x-backend-defaults: &backend_defaults
  <<: [*depends_on_configurator, *customizable_image]
  volumes:
    - sites:/home/frappe/frappe-bench/sites

services:
  configurator:
    <<: *customizable_image
    command:
      - bash
      - -c
      - >
        if [ -z "${NO_MIGRATE-}" ]; then migrate=true; else migrate=false; fi &&
        bench init --skip-redis-config-generation --skip-assets --frappe-branch $FRAPPE_VERSION frappe-bench &&
        cd frappe-bench &&
        bench set-config -g db_host ${DB_HOST} &&
        bench set-config -gp db_port ${DB_PORT} &&
        bench set-config -g redis_cache ${REDIS_CACHE} &&
        bench set-config -g redis_queue ${REDIS_QUEUE} &&
        bench set-config -g redis_socketio ${REDIS_SOCKETIO} &&
        bench new-site --db-root-password ${DB_ROOT_PASSWORD} --admin-password ${ADMIN_PASSWORD} --no-mariadb-socket ${SITE_NAME} &&
        if [ "$migrate" = "true" ]; then bench --site ${SITE_NAME} set-config server_script_enabled 1; fi &&
        bench --site ${SITE_NAME} set-config apps_path "/home/frappe/frappe-bench/apps.json"
    environment:
      - FRAPPE_VERSION=${FRAPPE_VERSION}
      - SITE_NAME=${SITE_NAME:-frappe.localhost}
      - DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-frappe}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - DB_HOST=${DB_HOST:-mariadb}
      - DB_PORT=${DB_PORT:-3306}
      - REDIS_CACHE=${REDIS_CACHE:-redis://redis-cache:6379/0}
      - REDIS_QUEUE=${REDIS_QUEUE:-redis://redis-queue:6379/1}
      - REDIS_SOCKETIO=${REDIS_SOCKETIO:-redis://redis-socketio:6379/2}
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  backend:
    <<: *backend_defaults
    deploy:
      resources:
        limits:
          cpus: "${BACKEND_CPUS_LIMIT:-0}"
          memory: "${BACKEND_MEMORY_LIMIT:-0}"
        reservations:
          cpus: "${BACKEND_CPUS_RESERVATION:-0}"
          memory: "${BACKEND_MEMORY_RESERVATION:-0}"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  frontend:
    <<: *customizable_image
    command:
      - nginx-entrypoint.sh
    deploy:
      resources:
        limits:
          cpus: "${FRONTEND_CPUS_LIMIT:-0}"
          memory: "${FRONTEND_MEMORY_LIMIT:-0}"
        reservations:
          cpus: "${FRONTEND_CPUS_RESERVATION:-0}"
          memory: "${FRONTEND_MEMORY_RESERVATION:-0}"
    environment:
      - FRAPPE_SITE_NAME_HEADER=${FRAPPE_SITE_NAME_HEADER:-$$host}
      - UPSTREAM_REAL_IP_ADDRESS=${UPSTREAM_REAL_IP_ADDRESS:-127.0.0.1}
      - UPSTREAM_REAL_IP_HEADER=${UPSTREAM_REAL_IP_HEADER:-X-Forwarded-For}
      - UPSTREAM_REAL_IP_RECURSIVE=${UPSTREAM_REAL_IP_RECURSIVE:-off}
      - PROXY_READ_TIMEOUT=${PROXY_READ_TIMEOUT:-120}
      - CLIENT_MAX_BODY_SIZE=${CLIENT_MAX_BODY_SIZE:-50m}
    volumes:
      - sites:/usr/share/nginx/html/sites
    depends_on:
      - backend
      - websocket

  queue-short:
    <<: *backend_defaults
    command:
      - bench
      - worker
      - --queue
      - short
    deploy:
      resources:
        limits:
          cpus: "${SHORT_QUEUE_CPUS_LIMIT:-0}"
          memory: "${SHORT_QUEUE_MEMORY_LIMIT:-0}"
        reservations:
          cpus: "${SHORT_QUEUE_CPUS_RESERVATION:-0}"
          memory: "${SHORT_QUEUE_MEMORY_RESERVATION:-0}"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  queue-long:
    <<: *backend_defaults
    command:
      - bench
      - worker
      - --queue
      - long
    deploy:
      resources:
        limits:
          cpus: "${LONG_QUEUE_CPUS_LIMIT:-0}"
          memory: "${LONG_QUEUE_MEMORY_LIMIT:-0}"
        reservations:
          cpus: "${LONG_QUEUE_CPUS_RESERVATION:-0}"
          memory: "${LONG_QUEUE_MEMORY_RESERVATION:-0}"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  queue-default:
    <<: *backend_defaults
    command:
      - bench
      - worker
      - --queue
      - default
    deploy:
      resources:
        limits:
          cpus: "${DEFAULT_QUEUE_CPUS_LIMIT:-0}"
          memory: "${DEFAULT_QUEUE_MEMORY_LIMIT:-0}"
        reservations:
          cpus: "${DEFAULT_QUEUE_CPUS_RESERVATION:-0}"
          memory: "${DEFAULT_QUEUE_MEMORY_RESERVATION:-0}"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  scheduler:
    <<: *backend_defaults
    command:
      - bench
      - schedule
    deploy:
      resources:
        limits:
          cpus: "${SCHEDULER_CPUS_LIMIT:-0}"
          memory: "${SCHEDULER_MEMORY_LIMIT:-0}"
        reservations:
          cpus: "${SCHEDULER_CPUS_RESERVATION:-0}"
          memory: "${SCHEDULER_MEMORY_RESERVATION:-0}"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  websocket:
    <<: *backend_defaults
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    deploy:
      resources:
        limits:
          cpus: "${WEBSOCKET_CPUS_LIMIT:-0}"
          memory: "${WEBSOCKET_MEMORY_LIMIT:-0}"
        reservations:
          cpus: "${WEBSOCKET_CPUS_RESERVATION:-0}"
          memory: "${WEBSOCKET_MEMORY_RESERVATION:-0}"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

volumes:
  sites:
  logs:

# Verwende docker-compose.override.yml für eigene Anpassungen